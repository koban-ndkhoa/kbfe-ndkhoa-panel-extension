"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGlobalStore = exports.useMousePosition = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const vue_1 = require("vue");
const panelDataMap = new WeakMap();
const useMousePosition = () => {
    const mouseX = (0, vue_1.ref)(null);
    const mouseY = (0, vue_1.ref)(null);
    document.addEventListener('mousemove', (e) => {
        mouseX.value = e.clientX;
        mouseY.value = e.clientY;
    });
    return { mouseX, mouseY };
};
exports.useMousePosition = useMousePosition;
const useGlobalStore = () => {
    let anim = {
        curSpeed: 0,
        oneLoopTime: 1,
        distanceOfOneLoop: 0,
        fps: 60,
        initFrame: 0,
        frameStep: 15
    };
    let symbols = {
        unit_width: 180,
        unit_height: 211,
        count: 21,
        nGroups: 3,
        preSymbols: {
            initPosY: 0,
            posYAtFrame: {},
            switchOrder: 2
        },
        mainSymbols: {
            initPosY: -422,
            posYAtFrame: {},
            switchOrder: 1
        },
        postSymbols: {
            initPosY: -844,
            posYAtFrame: {},
            switchOrder: 0
        },
    };
    let tableData = [
        {
            pre: ["PreData"], main: ["MainData"], post: ["PostData"]
        }
    ];
    let data = (0, vue_1.ref)({
        anim: anim,
        symbols: symbols,
        tableData: tableData,
        curSwitchOrder: -1,
    });
    let methods = {
        updateTable() {
            let anim = data.value.anim;
            let symbols = data.value.symbols;
            anim.distanceOfOneLoop = symbols.unit_height * symbols.count;
            anim.curSpeed = anim.distanceOfOneLoop / anim.oneLoopTime;
            data.value.curSwitchOrder = -1;
            symbols.preSymbols.posYAtFrame[anim.initFrame] = symbols.preSymbols.initPosY;
            symbols.mainSymbols.posYAtFrame[anim.initFrame] = symbols.mainSymbols.initPosY;
            symbols.postSymbols.posYAtFrame[anim.initFrame] = symbols.postSymbols.initPosY;
            let nextFrame = anim.initFrame + anim.frameStep;
            let framesArr = Array.from({ length: anim.fps / anim.frameStep }, (_, i) => nextFrame + i * anim.frameStep); // make [15, 30, 45, 60] if initFrame=0 or [35, 50, 65, 80] if initFrame = 20
            console.log("framesArr %o", framesArr);
            data.value.tableData = framesArr.map((frame, i) => {
                data.value.curSwitchOrder++;
                let getSymbolResultParams = {
                    curFrame: frame,
                    frameStep: anim.frameStep,
                    speed: anim.curSpeed,
                    curSwitchOrder: data.value.curSwitchOrder % symbols.nGroups,
                    distanceOfOneLoop: anim.distanceOfOneLoop,
                    fps: anim.fps
                };
                return {
                    pre: this.getSymbolResult(symbols.preSymbols, getSymbolResultParams),
                    main: this.getSymbolResult(symbols.mainSymbols, getSymbolResultParams),
                    post: this.getSymbolResult(symbols.postSymbols, getSymbolResultParams),
                };
            });
            console.log("tableData %o", data.value.tableData);
        },
        getSymbolResult(symbolGroup, params) {
            const { curFrame, frameStep, speed, curSwitchOrder, distanceOfOneLoop, fps } = params;
            let res = [];
            let res_1 = `frame: ${curFrame}`;
            let prevSwitchOrder = curSwitchOrder - 1;
            let isSwitchOnTopOnLastTime = prevSwitchOrder >= 0 && prevSwitchOrder == symbolGroup.switchOrder;
            let lastFrame = 0;
            if (false == isSwitchOnTopOnLastTime) {
                lastFrame = curFrame - frameStep >= 0 ? curFrame - frameStep : 0;
                let curPosY = symbolGroup.posYAtFrame[lastFrame];
                symbolGroup.posYAtFrame[curFrame] = this.getPosYOnMovingDownward(curPosY, frameStep, speed, fps);
                res_1 += `, curPosY: ${symbolGroup.posYAtFrame[curFrame].toFixed(4)} `;
                res.push(res_1);
            }
            else {
                lastFrame = curFrame - frameStep + 1 >= 0 ? curFrame - frameStep + 1 : 0;
                let curPosY = symbolGroup.posYAtFrame[lastFrame];
                symbolGroup.posYAtFrame[curFrame] = this.getPosYOnMovingDownward(curPosY, frameStep - 1, speed, fps);
                res_1 += `, curPosY: ${symbolGroup.posYAtFrame[curFrame].toFixed(4)} `;
                res.push(res_1);
            }
            if (curSwitchOrder == symbolGroup.switchOrder) {
                symbolGroup.posYAtFrame[curFrame + 1] = this.getPosYOnSwitchingToTop(symbolGroup.posYAtFrame[curFrame], speed, distanceOfOneLoop, fps);
                let res_2 = `frame: ${curFrame + 1}`;
                res_2 += `, curPosY: ${symbolGroup.posYAtFrame[curFrame + 1].toFixed(4)} `;
                res.push(res_2);
            }
            return res;
        },
        getPosYOnMovingDownward(curPosY, frameStep, speed, fps) {
            return curPosY - speed * frameStep / fps;
        },
        getPosYOnSwitchingToTop(curPosY, speed, distanceOfOneLoop, fps) {
            return curPosY + distanceOfOneLoop - speed * 1 / fps;
        },
    };
    return { data, methods };
};
exports.useGlobalStore = useGlobalStore;
/**
 * @zh 如果希望兼容 3.3 之前的版本可以使用下方的代码
 * @en You can add the code below if you want compatibility with versions prior to 3.3
 */
// Editor.Panel.define = Editor.Panel.define || function(options: any) { return options }
module.exports = Editor.Panel.define({
    listeners: {
        show() { console.log('show'); },
        hide() { console.log('hide'); },
    },
    template: (0, fs_extra_1.readFileSync)((0, path_1.join)(__dirname, '../../../static/template/default/index.html'), 'utf-8'),
    style: (0, fs_extra_1.readFileSync)((0, path_1.join)(__dirname, '../../../static/style/default/index.css'), 'utf-8'),
    $: {
        app: '#app',
        text: '#text',
    },
    methods: {},
    ready() {
        if (this.$.text) {
            this.$.text.innerHTML = 'Hello Cocos.';
        }
        if (this.$.app) {
            const app = (0, vue_1.createApp)({});
            app.config.compilerOptions.isCustomElement = (tag) => tag.startsWith('ui-');
            // ---------------------
            // -- @app-testsection
            // ---------------------
            const { data, methods } = (0, exports.useGlobalStore)();
            // -------------------
            // -- @app-component
            // -------------------
            app.component('reel-anim-info', {
                template: (0, fs_extra_1.readFileSync)((0, path_1.join)(__dirname, '../../../static/template/vue/reel-anim-info.html'), 'utf-8'),
                data() {
                    return { data };
                },
                methods: methods,
                mounted() {
                    //data = (this as any).$data;
                    //methods.updateTable();
                },
            });
            app.mount(this.$.app);
            panelDataMap.set(this, app);
        }
    },
    beforeClose() { },
    close() {
        const app = panelDataMap.get(this);
        if (app) {
            app.unmount();
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zb3VyY2UvcGFuZWxzL2RlZmF1bHQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQXdDO0FBQ3hDLCtCQUE0QjtBQUM1Qiw2QkFBMEM7QUFFMUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxPQUFPLEVBQVksQ0FBQztBQUV0QyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsRUFBRTtJQUNqQyxNQUFNLE1BQU0sR0FBRyxJQUFBLFNBQUcsRUFBZ0IsSUFBSSxDQUFDLENBQUM7SUFDeEMsTUFBTSxNQUFNLEdBQUcsSUFBQSxTQUFHLEVBQWdCLElBQUksQ0FBQyxDQUFDO0lBRXhDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUN6QyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDekIsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUM5QixDQUFDLENBQUM7QUFWVyxRQUFBLGdCQUFnQixvQkFVM0I7QUFHSyxNQUFNLGNBQWMsR0FBRyxHQUFHLEVBQUU7SUFFL0IsSUFBSSxJQUFJLEdBQVU7UUFDZCxRQUFRLEVBQUUsQ0FBQztRQUNYLFdBQVcsRUFBRSxDQUFDO1FBQ2QsaUJBQWlCLEVBQUUsQ0FBQztRQUNwQixHQUFHLEVBQUUsRUFBRTtRQUNQLFNBQVMsRUFBRSxDQUFDO1FBQ1osU0FBUyxFQUFFLEVBQUU7S0FDaEIsQ0FBQTtJQUVELElBQUksT0FBTyxHQUFhO1FBQ3BCLFVBQVUsRUFBRSxHQUFHO1FBQ2YsV0FBVyxFQUFFLEdBQUc7UUFDaEIsS0FBSyxFQUFFLEVBQUU7UUFDVCxPQUFPLEVBQUUsQ0FBQztRQUVWLFVBQVUsRUFBRTtZQUNS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QUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLENBQUM7SUFDTCxDQUFDO0lBQ0QsV0FBVyxLQUFLLENBQUM7SUFDakIsS0FBSztRQUNELE1BQU0sR0FBRyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNOLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNsQixDQUFDO0lBQ0wsQ0FBQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzLWV4dHJhJztcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyBjcmVhdGVBcHAsIEFwcCwgcmVmIH0gZnJvbSAndnVlJztcclxuaW1wb3J0IHsgSUFuaW0sIElTeW1ib2xzLCBJU3ltYm9sR3JvdXAsIElUYWJsZURhdGEgfSBmcm9tICcuL3R5cGVzLWRlZmluaXRpb24nO1xyXG5jb25zdCBwYW5lbERhdGFNYXAgPSBuZXcgV2Vha01hcDxhbnksIEFwcD4oKTtcclxuXHJcbmV4cG9ydCBjb25zdCB1c2VNb3VzZVBvc2l0aW9uID0gKCkgPT4ge1xyXG4gICAgY29uc3QgbW91c2VYID0gcmVmPG51bWJlciB8IG51bGw+KG51bGwpO1xyXG4gICAgY29uc3QgbW91c2VZID0gcmVmPG51bWJlciB8IG51bGw+KG51bGwpO1xyXG5cclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChlKSA9PiB7XHJcbiAgICAgICAgbW91c2VYLnZhbHVlID0gZS5jbGllbnRYO1xyXG4gICAgICAgIG1vdXNlWS52YWx1ZSA9IGUuY2xpZW50WTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7IG1vdXNlWCwgbW91c2VZIH07XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUdsb2JhbFN0b3JlID0gKCkgPT4ge1xyXG5cclxuICAgIGxldCBhbmltOiBJQW5pbSA9IHtcclxuICAgICAgICBjdXJTcGVlZDogMCxcclxuICAgICAgICBvbmVMb29wVGltZTogMSxcclxuICAgICAgICBkaXN0YW5jZU9mT25lTG9vcDogMCxcclxuICAgICAgICBmcHM6IDYwLFxyXG4gICAgICAgIGluaXRGcmFtZTogMCxcclxuICAgICAgICBmcmFtZVN0ZXA6IDE1XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHN5bWJvbHM6IElTeW1ib2xzID0ge1xyXG4gICAgICAgIHVuaXRfd2lkdGg6IDE4MCxcclxuICAgICAgICB1bml0X2hlaWdodDogMjExLFxyXG4gICAgICAgIGNvdW50OiAyMSxcclxuICAgICAgICBuR3JvdXBzOiAzLFxyXG5cclxuICAgICAgICBwcmVTeW1ib2xzOiB7XHJcbiAgICAgICAgICAgIGluaXRQb3NZOiAwLFxyXG4gICAgICAgICAgICBwb3NZQXRGcmFtZToge30sXHJcbiAgICAgICAgICAgIHN3aXRjaE9yZGVyOiAyXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbWFpblN5bWJvbHM6IHtcclxuICAgICAgICAgICAgaW5pdFBvc1k6IC00MjIsXHJcbiAgICAgICAgICAgIHBvc1lBdEZyYW1lOiB7fSxcclxuICAgICAgICAgICAgc3dpdGNoT3JkZXI6IDFcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBvc3RTeW1ib2xzOiB7XHJcbiAgICAgICAgICAgIGluaXRQb3NZOiAtODQ0LFxyXG4gICAgICAgICAgICBwb3NZQXRGcmFtZToge30sXHJcbiAgICAgICAgICAgIHN3aXRjaE9yZGVyOiAwXHJcbiAgICAgICAgfSxcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdGFibGVEYXRhOiBJVGFibGVEYXRhW10gPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwcmU6IFtcIlByZURhdGFcIl0sIG1haW46IFtcIk1haW5EYXRhXCJdLCBwb3N0OiBbXCJQb3N0RGF0YVwiXVxyXG4gICAgICAgIH1cclxuICAgIF1cclxuXHJcbiAgICBsZXQgZGF0YSA9IHJlZih7XHJcbiAgICAgICAgYW5pbTogYW5pbSxcclxuICAgICAgICBzeW1ib2xzOiBzeW1ib2xzLFxyXG4gICAgICAgIHRhYmxlRGF0YTogdGFibGVEYXRhLFxyXG4gICAgICAgIGN1clN3aXRjaE9yZGVyOiAtMSxcclxuICAgIH0pXHJcblxyXG4gICAgbGV0IG1ldGhvZHMgPSB7XHJcblxyXG4gICAgICAgIHVwZGF0ZVRhYmxlKCkge1xyXG4gICAgICAgICAgICBsZXQgYW5pbSA9IGRhdGEudmFsdWUuYW5pbTtcclxuICAgICAgICAgICAgbGV0IHN5bWJvbHMgPSBkYXRhLnZhbHVlLnN5bWJvbHM7XHJcblxyXG4gICAgICAgICAgICBhbmltLmRpc3RhbmNlT2ZPbmVMb29wID0gc3ltYm9scy51bml0X2hlaWdodCAqIHN5bWJvbHMuY291bnQ7XHJcbiAgICAgICAgICAgIGFuaW0uY3VyU3BlZWQgPSBhbmltLmRpc3RhbmNlT2ZPbmVMb29wIC8gYW5pbS5vbmVMb29wVGltZTtcclxuICAgICAgICAgICAgZGF0YS52YWx1ZS5jdXJTd2l0Y2hPcmRlciA9IC0xO1xyXG5cclxuICAgICAgICAgICAgc3ltYm9scy5wcmVTeW1ib2xzLnBvc1lBdEZyYW1lW2FuaW0uaW5pdEZyYW1lXSA9IHN5bWJvbHMucHJlU3ltYm9scy5pbml0UG9zWVxyXG4gICAgICAgICAgICBzeW1ib2xzLm1haW5TeW1ib2xzLnBvc1lBdEZyYW1lW2FuaW0uaW5pdEZyYW1lXSA9IHN5bWJvbHMubWFpblN5bWJvbHMuaW5pdFBvc1lcclxuICAgICAgICAgICAgc3ltYm9scy5wb3N0U3ltYm9scy5wb3NZQXRGcmFtZVthbmltLmluaXRGcmFtZV0gPSBzeW1ib2xzLnBvc3RTeW1ib2xzLmluaXRQb3NZXHJcbiAgICAgICAgICAgIGxldCBuZXh0RnJhbWUgPSBhbmltLmluaXRGcmFtZSArIGFuaW0uZnJhbWVTdGVwO1xyXG4gICAgICAgICAgICBsZXQgZnJhbWVzQXJyID0gQXJyYXkuZnJvbShcclxuICAgICAgICAgICAgICAgIHsgbGVuZ3RoOiBhbmltLmZwcyAvIGFuaW0uZnJhbWVTdGVwIH0sXHJcbiAgICAgICAgICAgICAgICAoXywgaSkgPT4gbmV4dEZyYW1lICsgaSAqIGFuaW0uZnJhbWVTdGVwXHJcbiAgICAgICAgICAgICkgLy8gbWFrZSBbMTUsIDMwLCA0NSwgNjBdIGlmIGluaXRGcmFtZT0wIG9yIFszNSwgNTAsIDY1LCA4MF0gaWYgaW5pdEZyYW1lID0gMjBcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZnJhbWVzQXJyICVvXCIsIGZyYW1lc0Fycik7XHJcblxyXG5cclxuICAgICAgICAgICAgZGF0YS52YWx1ZS50YWJsZURhdGEgPSBmcmFtZXNBcnIubWFwKChmcmFtZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGF0YS52YWx1ZS5jdXJTd2l0Y2hPcmRlcisrO1xyXG4gICAgICAgICAgICAgICAgbGV0IGdldFN5bWJvbFJlc3VsdFBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJGcmFtZTogZnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVTdGVwOiBhbmltLmZyYW1lU3RlcCxcclxuICAgICAgICAgICAgICAgICAgICBzcGVlZDogYW5pbS5jdXJTcGVlZCxcclxuICAgICAgICAgICAgICAgICAgICBjdXJTd2l0Y2hPcmRlcjogZGF0YS52YWx1ZS5jdXJTd2l0Y2hPcmRlciAlIHN5bWJvbHMubkdyb3VwcyxcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZU9mT25lTG9vcDogYW5pbS5kaXN0YW5jZU9mT25lTG9vcCxcclxuICAgICAgICAgICAgICAgICAgICBmcHM6IGFuaW0uZnBzXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmU6IHRoaXMuZ2V0U3ltYm9sUmVzdWx0KHN5bWJvbHMucHJlU3ltYm9scywgZ2V0U3ltYm9sUmVzdWx0UGFyYW1zKSxcclxuICAgICAgICAgICAgICAgICAgICBtYWluOiB0aGlzLmdldFN5bWJvbFJlc3VsdChzeW1ib2xzLm1haW5TeW1ib2xzLCBnZXRTeW1ib2xSZXN1bHRQYXJhbXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc3Q6IHRoaXMuZ2V0U3ltYm9sUmVzdWx0KHN5bWJvbHMucG9zdFN5bWJvbHMsIGdldFN5bWJvbFJlc3VsdFBhcmFtcyksXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0YWJsZURhdGEgJW9cIiwgZGF0YS52YWx1ZS50YWJsZURhdGEpO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRTeW1ib2xSZXN1bHQoXHJcbiAgICAgICAgICAgIHN5bWJvbEdyb3VwOiBJU3ltYm9sR3JvdXAsXHJcbiAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgY3VyRnJhbWU6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIGZyYW1lU3RlcDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIGN1clN3aXRjaE9yZGVyOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBkaXN0YW5jZU9mT25lTG9vcDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgZnBzOiBudW1iZXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk6IHN0cmluZ1tdIHtcclxuICAgICAgICAgICAgY29uc3QgeyBjdXJGcmFtZSwgZnJhbWVTdGVwLCBzcGVlZCwgY3VyU3dpdGNoT3JkZXIsIGRpc3RhbmNlT2ZPbmVMb29wLCBmcHMgfSA9IHBhcmFtcztcclxuICAgICAgICAgICAgbGV0IHJlcyA9IFtdXHJcbiAgICAgICAgICAgIGxldCByZXNfMSA9IGBmcmFtZTogJHtjdXJGcmFtZX1gO1xyXG5cclxuICAgICAgICAgICAgbGV0IHByZXZTd2l0Y2hPcmRlciA9IGN1clN3aXRjaE9yZGVyIC0gMTtcclxuICAgICAgICAgICAgbGV0IGlzU3dpdGNoT25Ub3BPbkxhc3RUaW1lID1cclxuICAgICAgICAgICAgICAgIHByZXZTd2l0Y2hPcmRlciA+PSAwICYmIHByZXZTd2l0Y2hPcmRlciA9PSBzeW1ib2xHcm91cC5zd2l0Y2hPcmRlclxyXG4gICAgICAgICAgICBsZXQgbGFzdEZyYW1lID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChmYWxzZSA9PSBpc1N3aXRjaE9uVG9wT25MYXN0VGltZSkge1xyXG4gICAgICAgICAgICAgICAgbGFzdEZyYW1lID0gY3VyRnJhbWUgLSBmcmFtZVN0ZXAgPj0gMCA/IGN1ckZyYW1lIC0gZnJhbWVTdGVwIDogMDtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJQb3NZID0gc3ltYm9sR3JvdXAucG9zWUF0RnJhbWVbbGFzdEZyYW1lXTtcclxuICAgICAgICAgICAgICAgIHN5bWJvbEdyb3VwLnBvc1lBdEZyYW1lW2N1ckZyYW1lXSA9IHRoaXMuZ2V0UG9zWU9uTW92aW5nRG93bndhcmQoXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyUG9zWSwgZnJhbWVTdGVwLCBzcGVlZCwgZnBzXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgcmVzXzEgKz0gYCwgY3VyUG9zWTogJHtzeW1ib2xHcm91cC5wb3NZQXRGcmFtZVtjdXJGcmFtZV0udG9GaXhlZCg0KX0gYFxyXG4gICAgICAgICAgICAgICAgcmVzLnB1c2gocmVzXzEpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGFzdEZyYW1lID0gY3VyRnJhbWUgLSBmcmFtZVN0ZXAgKyAxID49IDAgPyBjdXJGcmFtZSAtIGZyYW1lU3RlcCArIDEgOiAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1clBvc1kgPSBzeW1ib2xHcm91cC5wb3NZQXRGcmFtZVtsYXN0RnJhbWVdO1xyXG4gICAgICAgICAgICAgICAgc3ltYm9sR3JvdXAucG9zWUF0RnJhbWVbY3VyRnJhbWVdID0gdGhpcy5nZXRQb3NZT25Nb3ZpbmdEb3dud2FyZChcclxuICAgICAgICAgICAgICAgICAgICBjdXJQb3NZLCBmcmFtZVN0ZXAgLSAxLCBzcGVlZCwgZnBzXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgcmVzXzEgKz0gYCwgY3VyUG9zWTogJHtzeW1ib2xHcm91cC5wb3NZQXRGcmFtZVtjdXJGcmFtZV0udG9GaXhlZCg0KX0gYFxyXG4gICAgICAgICAgICAgICAgcmVzLnB1c2gocmVzXzEpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJTd2l0Y2hPcmRlciA9PSBzeW1ib2xHcm91cC5zd2l0Y2hPcmRlcikge1xyXG4gICAgICAgICAgICAgICAgc3ltYm9sR3JvdXAucG9zWUF0RnJhbWVbY3VyRnJhbWUgKyAxXSA9IHRoaXMuZ2V0UG9zWU9uU3dpdGNoaW5nVG9Ub3AoXHJcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sR3JvdXAucG9zWUF0RnJhbWVbY3VyRnJhbWVdLCBzcGVlZCwgZGlzdGFuY2VPZk9uZUxvb3AsIGZwc1xyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzXzIgPSBgZnJhbWU6ICR7Y3VyRnJhbWUgKyAxfWBcclxuICAgICAgICAgICAgICAgIHJlc18yICs9IGAsIGN1clBvc1k6ICR7c3ltYm9sR3JvdXAucG9zWUF0RnJhbWVbY3VyRnJhbWUgKyAxXS50b0ZpeGVkKDQpfSBgXHJcbiAgICAgICAgICAgICAgICByZXMucHVzaChyZXNfMilcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFBvc1lPbk1vdmluZ0Rvd253YXJkKFxyXG4gICAgICAgICAgICBjdXJQb3NZOiBudW1iZXIsXHJcbiAgICAgICAgICAgIGZyYW1lU3RlcDogbnVtYmVyLFxyXG4gICAgICAgICAgICBzcGVlZDogbnVtYmVyLFxyXG4gICAgICAgICAgICBmcHM6IG51bWJlclxyXG4gICAgICAgICk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiBjdXJQb3NZIC0gc3BlZWQgKiBmcmFtZVN0ZXAgLyBmcHM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0UG9zWU9uU3dpdGNoaW5nVG9Ub3AoXHJcbiAgICAgICAgICAgIGN1clBvc1k6IG51bWJlcixcclxuICAgICAgICAgICAgc3BlZWQ6IG51bWJlcixcclxuICAgICAgICAgICAgZGlzdGFuY2VPZk9uZUxvb3A6IG51bWJlcixcclxuICAgICAgICAgICAgZnBzOiBudW1iZXJcclxuICAgICAgICApOiBudW1iZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gY3VyUG9zWSArIGRpc3RhbmNlT2ZPbmVMb29wIC0gc3BlZWQgKiAxIC8gZnBzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcblxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgZGF0YSwgbWV0aG9kcyB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBAemgg5aaC5p6c5biM5pyb5YW85a65IDMuMyDkuYvliY3nmoTniYjmnKzlj6/ku6Xkvb/nlKjkuIvmlrnnmoTku6PnoIFcclxuICogQGVuIFlvdSBjYW4gYWRkIHRoZSBjb2RlIGJlbG93IGlmIHlvdSB3YW50IGNvbXBhdGliaWxpdHkgd2l0aCB2ZXJzaW9ucyBwcmlvciB0byAzLjNcclxuICovXHJcbi8vIEVkaXRvci5QYW5lbC5kZWZpbmUgPSBFZGl0b3IuUGFuZWwuZGVmaW5lIHx8IGZ1bmN0aW9uKG9wdGlvbnM6IGFueSkgeyByZXR1cm4gb3B0aW9ucyB9XHJcbm1vZHVsZS5leHBvcnRzID0gRWRpdG9yLlBhbmVsLmRlZmluZSh7XHJcbiAgICBsaXN0ZW5lcnM6IHtcclxuICAgICAgICBzaG93KCkgeyBjb25zb2xlLmxvZygnc2hvdycpOyB9LFxyXG4gICAgICAgIGhpZGUoKSB7IGNvbnNvbGUubG9nKCdoaWRlJyk7IH0sXHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGU6IHJlYWRGaWxlU3luYyhqb2luKF9fZGlybmFtZSwgJy4uLy4uLy4uL3N0YXRpYy90ZW1wbGF0ZS9kZWZhdWx0L2luZGV4Lmh0bWwnKSwgJ3V0Zi04JyksXHJcbiAgICBzdHlsZTogcmVhZEZpbGVTeW5jKGpvaW4oX19kaXJuYW1lLCAnLi4vLi4vLi4vc3RhdGljL3N0eWxlL2RlZmF1bHQvaW5kZXguY3NzJyksICd1dGYtOCcpLFxyXG4gICAgJDoge1xyXG4gICAgICAgIGFwcDogJyNhcHAnLFxyXG4gICAgICAgIHRleHQ6ICcjdGV4dCcsXHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge30sXHJcbiAgICByZWFkeSgpIHtcclxuICAgICAgICBpZiAodGhpcy4kLnRleHQpIHtcclxuICAgICAgICAgICAgdGhpcy4kLnRleHQuaW5uZXJIVE1MID0gJ0hlbGxvIENvY29zLic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy4kLmFwcCkge1xyXG4gICAgICAgICAgICBjb25zdCBhcHAgPSBjcmVhdGVBcHAoe30pO1xyXG4gICAgICAgICAgICBhcHAuY29uZmlnLmNvbXBpbGVyT3B0aW9ucy5pc0N1c3RvbUVsZW1lbnQgPSAodGFnKSA9PiB0YWcuc3RhcnRzV2l0aCgndWktJyk7XHJcblxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgLy8gLS0gQGFwcC10ZXN0c2VjdGlvblxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBtZXRob2RzIH0gPSB1c2VHbG9iYWxTdG9yZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyAtLSBAYXBwLWNvbXBvbmVudFxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIGFwcC5jb21wb25lbnQoJ3JlZWwtYW5pbS1pbmZvJywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHJlYWRGaWxlU3luYyhqb2luKF9fZGlybmFtZSwgJy4uLy4uLy4uL3N0YXRpYy90ZW1wbGF0ZS92dWUvcmVlbC1hbmltLWluZm8uaHRtbCcpLCAndXRmLTgnKSxcclxuICAgICAgICAgICAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSB9O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG1ldGhvZHM6IG1ldGhvZHMsXHJcbiAgICAgICAgICAgICAgICBtb3VudGVkKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZGF0YSA9ICh0aGlzIGFzIGFueSkuJGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tZXRob2RzLnVwZGF0ZVRhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYXBwLm1vdW50KHRoaXMuJC5hcHApO1xyXG4gICAgICAgICAgICBwYW5lbERhdGFNYXAuc2V0KHRoaXMsIGFwcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlZm9yZUNsb3NlKCkgeyB9LFxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgY29uc3QgYXBwID0gcGFuZWxEYXRhTWFwLmdldCh0aGlzKTtcclxuICAgICAgICBpZiAoYXBwKSB7XHJcbiAgICAgICAgICAgIGFwcC51bm1vdW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxufSk7XHJcblxyXG5cclxuXHJcblxyXG4iXX0=